import{_ as l,o as e,c as o,U as t}from"./chunks/framework.32b227f7.js";const i="/blog-site/assets/img.2827d215.png",m=JSON.parse('{"title":"总结","description":"","frontmatter":{},"headers":[],"relativePath":"interview/总结.md","filePath":"interview/总结.md"}'),a={name:"interview/总结.md"},c=t('<h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1><h2 id="js执行机制" tabindex="-1">JS执行机制 <a class="header-anchor" href="#js执行机制" aria-label="Permalink to &quot;JS执行机制&quot;">​</a></h2><h3 id="同步任务-异步任务" tabindex="-1">同步任务/异步任务 <a class="header-anchor" href="#同步任务-异步任务" aria-label="Permalink to &quot;同步任务/异步任务&quot;">​</a></h3><ul><li>同步任务: 指的是在主线程上排队执行的任务, 只有当前一个任务执行完毕后才可执行下一个任务。(<code>按顺序、自上而下</code>)</li><li>异步任务: 指的是不进入主线程, 而进入任务队列的任务。 只有当任务队列通知主线程某个异步任务可以执行, 方可进入主线程进行执行. (<code>通知主线程后方可执行</code>)</li></ul><div class="tip custom-block"><p class="custom-block-title">异步任务分为<code>宏任务</code>和<code>微任务</code></p><p>常见的微任务有: <code>Promise.then()</code>, <code>.then</code> 中的逻辑是微任务; <code>process.nextTick(node环境)</code>.</p><p>常见的宏任务有: <code>setTimeout、setInterval</code>、<code>setImmediate(node环境)</code>、<code>xhr(发送网络请求)</code>, <code>callback</code>.</p><p>同步任务: 除了上面的这些情况, 都属于同步任务</p></div><h3 id="任务的执行顺序" tabindex="-1">任务的执行顺序 <a class="header-anchor" href="#任务的执行顺序" aria-label="Permalink to &quot;任务的执行顺序&quot;">​</a></h3><blockquote><p>先到后: 同步任务 -&gt; 微任务 -&gt; 宏任务</p></blockquote><h3 id="任务在哪里执行" tabindex="-1">任务在哪里执行 <a class="header-anchor" href="#任务在哪里执行" aria-label="Permalink to &quot;任务在哪里执行&quot;">​</a></h3><blockquote><p>无论是同步任务还是异步任务, 都是在<code>主线程</code>执行.</p></blockquote><h3 id="event-loop" tabindex="-1">event loop <a class="header-anchor" href="#event-loop" aria-label="Permalink to &quot;event loop&quot;">​</a></h3><blockquote><p>事件循环(event loop) 就是 任务在主线程不断进栈出栈的一个循环过程。任务会在将要执行时进入主线程，在执行完毕后退出主线程。</p></blockquote><h4 id="循环的步骤" tabindex="-1">循环的步骤 <a class="header-anchor" href="#循环的步骤" aria-label="Permalink to &quot;循环的步骤&quot;">​</a></h4><ol><li>把 <code>同步任务队列</code> 或者 <code>微任务队列</code> 或者 <code>宏任务队列</code> 中的任务放入主线程.</li><li><code>同步任务</code> 或者 <code>微任务</code> 或者 <code>宏任务</code> 在执行完毕后会全部退出主线程.</li></ol><h4 id="实际场景中" tabindex="-1">实际场景中 <a class="header-anchor" href="#实际场景中" aria-label="Permalink to &quot;实际场景中&quot;">​</a></h4><blockquote><p>同步任务</p></blockquote><ol><li>把同步任务相继加入同步任务队列</li><li>把同步任务队列的任务相继加入主线程</li><li>待主线程的任务相继执行完毕后, 把主线程队列清空</li></ol><blockquote><p>微任务</p></blockquote><ol start="4"><li>把微任务相继加入微任务队列</li><li>把微任务队列的任务相继加入主线程</li><li>待主线程的任务相继执行完毕后, 把主线程队列清空</li></ol><blockquote><p>宏任务</p></blockquote><ol start="7"><li>把宏任务相继加入宏任务队列. 无 <code>time</code> 的先加入, 像网络请求. 有 <code>time</code> 后加入, 像 <code>setTimeout(() =&gt; {}, time)</code>, 在他们中 <code>time</code> 短的先加入</li><li>把宏任务队列的任务相继加入主线程</li><li>待主线程的任务相继执行完毕后, 把主线程队列清空</li></ol><h2 id="call-apply-bind-三者的区别" tabindex="-1">call, apply, bind 三者的区别 <a class="header-anchor" href="#call-apply-bind-三者的区别" aria-label="Permalink to &quot;call, apply, bind 三者的区别&quot;">​</a></h2><blockquote><p>共同点: 都可以改变 <code>this</code> 指向</p></blockquote><div class="tip custom-block"><p class="custom-block-title">三者的区别</p><p>call 和 apply 会直接调用函数. bind 不会调用函数</p><p>call 和 apply 传递的参数不一样, call传递参数使用逗号隔开, apply 使用数组传递</p></div><h3 id="bind" tabindex="-1">bind <a class="header-anchor" href="#bind" aria-label="Permalink to &quot;bind&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">bind</p><ul><li>bind 和 call、apply 功能类似</li><li>call 和 apply 是临时的改变 this, bind 是永久改变 this</li><li>call 是 &#39;改变 this&#39;, bind 是 &#39;绑定 this&#39;</li><li>bind 返回的函数, 内部的 this, 永远指向 bind 的第一个参数 (不管以何种方式调用)</li><li>bind 优先级比 call 高</li></ul></div><div class="tip custom-block"><p class="custom-block-title">bind方法</p><ul><li>用来干嘛 =&gt; 永久绑定this</li><li>参数问题 =&gt; 和 call 一致</li><li>返回 =&gt; 一个和原函数一模一样的函数(和原函数不是同一个)</li><li>原函数.bind(绑定的对象, 参数1, 参数2...)</li></ul></div><h2 id="defer-async-的区别" tabindex="-1">defer async 的区别 <a class="header-anchor" href="#defer-async-的区别" aria-label="Permalink to &quot;defer async 的区别&quot;">​</a></h2><blockquote><p>当没有 defer 或 async, 浏览器会立即加载并执行指定的脚本, &#39;立即&#39;指的是在渲染该 script 标签 之下的文档元素之前, 也就是不等待后续载入的文档元素, 读到就加载并执行.</p></blockquote><blockquote><p>async 加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行(异步)</p></blockquote><blockquote><p>defer 加载后续文档的过程将和 script.js 的加载并行进行(异步), 但是 script.js 的执行要在 所有元素解析完成之后, <code>DOMContentLoaded</code> 事件触发之前完成.</p></blockquote><blockquote><p>蓝色线代表网络读取, 红色线代表执行时间, 这俩都是针对脚本, 绿色线代表 HTML 解析 <img src="'+i+'" alt="流程图"></p></blockquote><ol><li>defer 和 async 在网络读取(下载) 这块是一样的, 都是异步的（相较于 HTML 解析）</li><li>他俩的差别在于脚本下载完之后何时执行, 显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li><li>关于 defer, 此图未尽之处在于他是按照加载顺序执行脚本的, 这一点要善加利用</li><li>async 则是一个乱序执行的主, 反正对于它来说脚本的加载和执行是紧紧挨着的, 所以不管你声明的顺序如何, 只要它加载完成就会立刻执行</li><li>async 对于应用脚本的用处不大, 因为它完全不考虑依赖(哪怕是最低级的顺序执行), 不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的, 最典型的例子: Google Analytics</li></ol><div class="tip custom-block"><p class="custom-block-title">总结</p><ol><li>script 会阻碍 html 编译</li><li>defer 和 async 会告诉浏览器不要等待脚本, 继续执行 html 生成 DOM</li><li>defer: js 操作DOM时使用, 例如: 轮播图</li><li>async: 在独立的js中使用, 例如: 广告</li></ol><p>defer 与 async 的区别是: 前者要等到整个页面正常渲染结束, 才会执行; 后者一旦下载完, 渲染引擎就会中断渲染, 执行这个脚本以后, 再继续渲染。</p><p>defer 是 &#39;渲染完再执行&#39;, async 是 &#39;下载完就执行&#39;</p><p>如果有多个 defer 脚本, 会按照他们在页面出现的顺序加载, 而多个 async 脚本是不能保证加载顺序的</p></div><h2 id="堆和栈" tabindex="-1">堆和栈 <a class="header-anchor" href="#堆和栈" aria-label="Permalink to &quot;堆和栈&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">区别</p><ul><li>简单数据类型的值在栈里, 可以直接拿. string, number, 布尔, null, undefined, symbol</li><li>复杂数据类型的值在堆里, 在栈里存的是地址, 通过地址指向堆里的数据. 堆里的值改变会影响多个数据, object(object, array, function)</li></ul></div><h2 id="http基础" tabindex="-1">http基础 <a class="header-anchor" href="#http基础" aria-label="Permalink to &quot;http基础&quot;">​</a></h2><blockquote><p>ip地址: xxx.xxx.xxx.xxx.xxx 计算机想要接入网络(互联网, 局域网), 都会分配一个唯一的标识, 这个标识就是 ip地址。 通过 ip地址 能够找到某一台计算机.</p></blockquote><blockquote><p>端口号: 每一个程序在计算机上运行, 其实需要占用端口, :80 是 http默认的端口, 通过端口可以找到具体的程序</p></blockquote><blockquote><p>域名: 例如: <code>www.baidu.com</code>, 域名好记. 在 DNS服务器中可以通过域名找到 ip地址.</p></blockquote><div class="tip custom-block"><p class="custom-block-title">例如</p><p>一个完成的url地址: 协议://域名: 端口/path/#hash?queryString</p></div><h2 id="浏览器从输入-url-到渲染页面发生了什么" tabindex="-1">浏览器从输入 url 到渲染页面发生了什么 <a class="header-anchor" href="#浏览器从输入-url-到渲染页面发生了什么" aria-label="Permalink to &quot;浏览器从输入 url 到渲染页面发生了什么&quot;">​</a></h2><ol><li>浏览器需要解析域名得到 ip地址 (现在本地的hosts查询, 再去 DNS 服务器查询) <ol><li>浏览器会先查询本地C盘下的hosts文件, 看能否通过 hosts 得到对应的ip地址(域名劫持)</li><li>如果没有从本地得到 ip地址, 会查询网络上的 DNS服务器, 根据DNS服务器 得到对应的ip地址</li></ol></li><li>浏览器根据得到的 ip地址 去访问真正的服务器, 请求资源（读取url的path部分）</li><li>服务器根据请求的url地址查找对应的资源 （如html, css, js, img, 数据. 服务器去对应的目录查找对应的资源）</li><li>服务器把资源响应给浏览器</li><li>浏览器解析服务器返回的资源</li><li>浏览器渲染页面</li></ol><div class="tip custom-block"><p class="custom-block-title">渲染过程</p><p>现代浏览器渲染页面的过程是这样的: 解析HTML以构建DOM树 -&gt; 构建渲染树 -&gt; 布局渲染树 -&gt; 绘制渲染树</p></div><h2 id="前端缓存类型有哪些" tabindex="-1">前端缓存类型有哪些 <a class="header-anchor" href="#前端缓存类型有哪些" aria-label="Permalink to &quot;前端缓存类型有哪些&quot;">​</a></h2><h3 id="前端做本地数据存储的方式有哪些" tabindex="-1">前端做本地数据存储的方式有哪些 <a class="header-anchor" href="#前端做本地数据存储的方式有哪些" aria-label="Permalink to &quot;前端做本地数据存储的方式有哪些&quot;">​</a></h3><ul><li>cookies: 出现的最早, 兼容性好, 容量小(4kb), 当没有设置过期时间, 在用户关闭浏览器时即失效</li><li>localStorage: 容量较大(5mb~10mb), 永久储存</li><li>sessionStorage: 容量较大(5mb~10mb), 暂时储存, 关闭页面时数据清除</li><li>indexedDB: h5出现, 是一种数据库. 容量最大</li></ul><h3 id="http缓存-浏览器缓存-强制缓存和协商缓存" tabindex="-1">http缓存(浏览器缓存): 强制缓存和协商缓存 <a class="header-anchor" href="#http缓存-浏览器缓存-强制缓存和协商缓存" aria-label="Permalink to &quot;http缓存(浏览器缓存): 强制缓存和协商缓存&quot;">​</a></h3><blockquote><p><code>cache-control, expires</code>: 浏览器发送http请求时, 先查询本地是否有强缓存, 如果（cache-control）没有过期就直接再本地中取。</p></blockquote><p>强制缓存是给<strong>cache</strong>设置过期时间, 如<strong>expires</strong>(给浏览器设置绝对时间), cache-control(保质期), 从响应头携带过来。</p><p>如果过期了再向服务器协商缓存, 到了后会判断请求响应头的字段。</p><div class="tip custom-block"><p class="custom-block-title">E-tag/Last-Modified</p><p>(最好) <strong>E-tag</strong>: 先判断请求头里的 if-not-match与服务器是否一致, <strong>判断文件的版本</strong>, 如果文件的版本没有变化就返回<strong>403</strong>, 本地读取。如果变化了就返回<strong>200</strong>再向服务器请求资源。</p><p><strong>Last-Modified</strong>: 先判断请求头里的 if-Mastodified-since 与服务器是否一致, <strong>判断文件上次修改时间</strong>, 如果文件的最后的修改时间没有变化就返回403, 本地读取。如果变化了就返回200再向服务器请求资源</p></div>',51),s=[c];function d(r,n,p,h,b,u){return e(),o("div",null,s)}const q=l(a,[["render",d]]);export{m as __pageData,q as default};
