import{_ as e,o as s,c as a,U as o}from"./chunks/framework.32b227f7.js";const h=JSON.parse('{"title":"webSocket","description":"","frontmatter":{},"headers":[],"relativePath":"browser/webSocket.md","filePath":"browser/webSocket.md"}'),l={name:"browser/webSocket.md"},t=o(`<h1 id="websocket" tabindex="-1">webSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;webSocket&quot;">​</a></h1><blockquote><p>它是一种网络通信协议, 是 <code>html5</code> 开始提供的一种在单个 TCP 链接上进行全双工通讯的协议</p></blockquote><h2 id="如何创建-websocket-对象" tabindex="-1">如何创建 webSocket 对象 <a class="header-anchor" href="#如何创建-websocket-对象" aria-label="Permalink to &quot;如何创建 webSocket 对象&quot;">​</a></h2><blockquote><p>new WebSocket(url)</p></blockquote><blockquote><p>new WebSocket(url, protocols)</p></blockquote><div class="tip custom-block"><p class="custom-block-title">url/protocols</p><p><code>url</code>: 要链接的URL, 这应该是 webSocket 服务器将响应的 URL</p><p><code>procotols</code>(可选): 单个协议字符串或协议字符串数组。 这些字符串用于指示子协议, 以便单个服务器可以实现多个 WebSocket 子协议 (例如, 您可能希望一个服务器能够根据指定的协议处理不同类型的交互)。 如果省略它, 则默认使用空数组, 即[].</p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> ws </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WebSocket</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ws://echo.websocket.org</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><h3 id="binarytype" tabindex="-1">binaryType <a class="header-anchor" href="#binarytype" aria-label="Permalink to &quot;binaryType&quot;">​</a></h3><blockquote><p><code>WebSocket.binaryType</code> BinaryType 属性控制通过 webSocket 连接接受的二进制数据的类型</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> binaryType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> aWebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">binaryType</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">返回值</p><p>一条<strong>DOMString</strong>:</p><pre><code>blob: 如果传输的是 Blob.这是默认值

arraybuffer: 如果传输的是 ArrayBuffer 类型的数据
</code></pre></div><h3 id="bufferedamount" tabindex="-1">bufferedAmount <a class="header-anchor" href="#bufferedamount" aria-label="Permalink to &quot;bufferedAmount&quot;">​</a></h3><blockquote><p>webSocket.bufferedAmount 是一个只读属性, 用于返回已经被 <code>send()</code> 方法放入队列中但还没有被发送到网络中 的数据的字节数。一旦队列中的所有数据被发送至网络，则该属性值将被重置为0.</p></blockquote><blockquote><p>但是, 若在发送过程中连接被关闭, 则属性值不会重置为0. 如果你不断地调用 <code>send()</code>, 则该属性值会持续增长.</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bufferedAmount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> aWebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bufferedAmount</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">返回值</p><p>一个 unsigned long</p></div><h3 id="extensions" tabindex="-1">extensions <a class="header-anchor" href="#extensions" aria-label="Permalink to &quot;extensions&quot;">​</a></h3><blockquote><p><code>WebSocket.extensions</code> 是只读属性, 返回服务器已选择的扩展值. 目前, 链接可以协定的扩展值只有空字符串或者一个扩展列表.</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> extensions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> aWebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extensions</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">返回值</p><p>A DOMString</p></div><h3 id="protocol" tabindex="-1">protocol <a class="header-anchor" href="#protocol" aria-label="Permalink to &quot;protocol&quot;">​</a></h3><blockquote><p><code>WebSocket.protocol</code> 是个只读属性, 用于返回服务器选中的子协议的名字; 这是一个在创建 <code>WebSocket</code> 对象时, 在参数 <code>protocols</code>中指定的字符串, 当没有已建立的链接时为空串.</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> protocol </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> aWebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">protocol</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">返回值</p><p>DOMSting</p></div><h3 id="readystate" tabindex="-1">readyState <a class="header-anchor" href="#readystate" aria-label="Permalink to &quot;readyState&quot;">​</a></h3><blockquote><p>返回当前 <code>WebSocket</code> 的链接状态, 只读.</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> readyState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> WebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">返回值</p><p>0 (WebSocket.CONNECTING) 正在链接中(套接字已创建. 连接尚未打开)</p><p>1 (WebSocket.OPEN) 已经链接并且可以通讯</p><p>2 (WebSocket.ClOSING) 已经链接并且可以通讯</p><p>3 (WebSocket.CLOSED) 链接已关闭或者没有链接成功</p></div><h3 id="url" tabindex="-1">url <a class="header-anchor" href="#url" aria-label="Permalink to &quot;url&quot;">​</a></h3><blockquote><p><code>WebSocket.url</code> 是一个只读属性, 返回值为当构造函数 <code>WebSocket</code> 实例对象时 URL的绝对路径.</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> aWebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">返回值</p><p>A DOMString</p></div><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="close" tabindex="-1">close() <a class="header-anchor" href="#close" aria-label="Permalink to &quot;close()&quot;">​</a></h3><blockquote><p><code>WebSocket.close()</code> 方法关闭 <code>WebSocket</code> 连接或连接尝试(如果有的话). 如果连接已经关闭, 则此方法不执行任何操作.</p></blockquote><div class="warning custom-block"><p class="custom-block-title">注意</p><p>关闭连接的过程始于结束握手, close() 方法在开始结束握手之前发送的消息; 即使用户代理仍然发送这些消息, 握手也只会在消息发送之后才会开始.</p></div>`,37),n=[t];function c(p,r,i,d,b,u){return s(),a("div",null,n)}const m=e(l,[["render",c]]);export{h as __pageData,m as default};
