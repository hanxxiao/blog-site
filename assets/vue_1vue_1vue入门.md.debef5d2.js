import{_ as e,o,c as l,U as i}from"./chunks/framework.32b227f7.js";const h=JSON.parse('{"title":"vue入门","description":"","frontmatter":{},"headers":[],"relativePath":"vue/1vue/1vue入门.md","filePath":"vue/1vue/1vue入门.md"}'),u={name:"vue/1vue/1vue入门.md"},t=i('<h1 id="vue入门" tabindex="-1">vue入门 <a class="header-anchor" href="#vue入门" aria-label="Permalink to &quot;vue入门&quot;">​</a></h1><h2 id="什么是-vue" tabindex="-1">什么是 vue <a class="header-anchor" href="#什么是-vue" aria-label="Permalink to &quot;什么是 vue&quot;">​</a></h2><blockquote><p>Vue 是<code>构建用户界面</code>的<code>渐进式</code>的 JavaScript框架</p></blockquote><ol><li>构建用户界面 <ul><li>在适当的时候拿到数据通过某种办法，变成用户看得到的界面</li></ul></li><li>渐进式 <ul><li>如果你要实现简单的功能，如一个活动的广告页, 用Vue核心库即可。如果要构建一个复杂的系统，需要使用 <code>VueX</code>、 <code>VueRouter</code> 等插件</li></ul></li></ol><h2 id="vue-的两个特性" tabindex="-1">vue 的两个特性 <a class="header-anchor" href="#vue-的两个特性" aria-label="Permalink to &quot;vue 的两个特性&quot;">​</a></h2><ol><li><p>数据驱动视图：</p><ul><li>数据的变化<strong>会驱动视图</strong>自动更新</li><li>好处：程序员只管把数据维护好，那么页面结构会被 vue 自动渲染出来！</li></ul></li><li><p>双向数据绑定：</p><blockquote><p>在网页中，form 表单负责<strong>采集数据</strong>，Ajax 负责<strong>提交数据</strong>。</p></blockquote><ul><li>js 数据的变化，会被自动渲染到页面上</li><li>页面上表单采集的数据发生变化的时候，会被 vue 自动获取到，并更新到 js 数据中</li></ul></li></ol><blockquote><p>注意：数据驱动视图和双向数据绑定的底层原理是 MVVM（Model 数据源、View 视图、ViewModel 就是 vue 的实例）</p></blockquote><h2 id="mvvm概念" tabindex="-1">MVVM概念 <a class="header-anchor" href="#mvvm概念" aria-label="Permalink to &quot;MVVM概念&quot;">​</a></h2><blockquote><p>MVVM 即 <code>Model-View-ViewModel</code> 的简写，即 <code>模型-视图-视图模型</code>。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">概念</p><ul><li>模型(Model): 指的是后端传递的数据。</li><li>视图(View): 指的是所看到的页面。</li><li>视图模型(ViewModel): MVVM模式的核心, 它是连接 <code>View</code> 和 <code>model</code>的桥梁。 <ol><li>将模型(<code>Model</code>)转化为视图(<code>View</code>), 将后端传递的数据转化成所看到的页面. <ul><li>实现的方式: 数据绑定</li></ul></li><li>将视图(<code>View</code>)转化为模型(<code>Model</code>), 将所看到的页面转化成后端的数据. <ul><li>实现的方式: <code>DOM</code> 事件监听.</li></ul></li></ol><ul><li>这俩者的实现: 数据的双向绑定.</li></ul></li></ul></div>',10),a=[t];function c(d,r,s,n,v,_){return o(),l("div",null,a)}const V=e(u,[["render",c]]);export{h as __pageData,V as default};
