import{_ as e,o as t,c as r,U as d}from"./chunks/framework.32b227f7.js";const b=JSON.parse('{"title":"生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"vue/1vue/3生命周期.md","filePath":"vue/1vue/3生命周期.md"}'),a={name:"vue/1vue/3生命周期.md"},o=d('<h1 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h1><blockquote><p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom -&gt; 渲染、更新 -&gt; 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">第一次加载页面会触发哪几个钩子函数</p><p>当页面第一次页面加载时会触发 <code>beforeCreate</code>, <code>created</code>, <code>beforeMount</code>, <code>mounted</code> 这几个钩子函数</p></div><h2 id="钩子函数" tabindex="-1">钩子函数 <a class="header-anchor" href="#钩子函数" aria-label="Permalink to &quot;钩子函数&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">钩子函数</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">beforeCreated</td><td style="text-align:center;">在实例初始化之后, 数据观测(<code>data observer</code>) 和 事件配制(<code>event/watcher</code>)之前被调用</td></tr><tr><td style="text-align:center;">created</td><td style="text-align:center;">在实例创建完成后被立即调用, 在这一步, 实例已完成相关的配置: 数据观测(<code>data observer</code>), 属性和方法的运算, <code>watch/event</code> 事件回调. 然而, 挂载阶段还没开始, <code>$el</code> 属性目前不可见</td></tr><tr><td style="text-align:center;">beforeMount</td><td style="text-align:center;">在挂载开始之前被调用: 相关的 <code>render</code> 函数首次被调用</td></tr><tr><td style="text-align:center;">mounted</td><td style="text-align:center;"><code>el</code> 被新创建的 <code>vm.$el</code> 替换, 并挂载实例上去之后调用该钩子, 如果 root实例挂载了一个文档内元素, 当 mounted 被调用时, vm.$el 也在文档内。</td></tr><tr><td style="text-align:center;">beforeUpdate</td><td style="text-align:center;">数据更新时调用, 发生在虚拟 DOM 打补丁之前. 这里适合在更新之前访问现有的DOM, 比如手动移除已添加的事件监听器. 该钩子在服务器端渲染期间不被调用, 因为只有初次渲染会在服务端进行</td></tr><tr><td style="text-align:center;">updated</td><td style="text-align:center;">由于数据更改导致的虚拟 DOM 重新渲染和打补丁, 在这之后会调用该钩子.</td></tr><tr><td style="text-align:center;">activated</td><td style="text-align:center;"><code>keep-alive</code> 组件激活时调用. 该钩子在服务器端渲染期间不被调用</td></tr><tr><td style="text-align:center;">deactivated</td><td style="text-align:center;"><code>keep-alive</code> 组件停用时调用. 该钩子在服务器端渲染期间不被调用</td></tr><tr><td style="text-align:center;">beforeDestroy</td><td style="text-align:center;">实例销毁之前调用。在这一步, 实例仍然完全可用。该钩子在服务器端渲染期间不被调用。</td></tr><tr><td style="text-align:center;">destroyed</td><td style="text-align:center;"><code>Vue</code> 实例销毁后调用。调用后，Vue实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用</td></tr><tr><td style="text-align:center;">errorCaptured(2.5.0+ 新增)</td><td style="text-align:center;">当捕获一个来自子孙组件的错误时被调用。该钩子会收到三个参数: 错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。该钩子可以返回 false 以阻止该错误继续向上传播。 一般在App.vue中使用。项目上线后可以捕获用户运行时产生的错误信息，错误上报。</td></tr></tbody></table><h2 id="父子组件生命周期-执行顺序" tabindex="-1">父子组件生命周期(执行顺序) <a class="header-anchor" href="#父子组件生命周期-执行顺序" aria-label="Permalink to &quot;父子组件生命周期(执行顺序)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">执行顺序(从上往下)</p><p><span style="color:green;">父</span> beforeCreate -&gt; created -&gt; beforeMounted <br><span style="color:#00a6e2;">子</span> beforeCreate -&gt; created -&gt; beforeMount -&gt; mounted <br><span style="color:green;">父</span> mounted -&gt; beforeUpdate <br><span style="color:#00a6e2;">子</span> beforeUpdate -&gt; updated <br><span style="color:green;">父</span> update -&gt; beforeDestroy <br><span style="color:#00a6e2;">子</span> beforeDestroy -&gt; destroyed <br><span style="color:green;">父</span> destroyed</p></div>',7),c=[o];function n(l,s,i,p,u,g){return t(),r("div",null,c)}const _=e(a,[["render",n]]);export{b as __pageData,_ as default};
