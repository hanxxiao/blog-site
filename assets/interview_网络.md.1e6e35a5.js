import{_ as e,o as a,c as t,U as o}from"./chunks/framework.32b227f7.js";const m=JSON.parse('{"title":"网络相关","description":"","frontmatter":{},"headers":[],"relativePath":"interview/网络.md","filePath":"interview/网络.md"}'),s={name:"interview/网络.md"},h=o('<h1 id="网络相关" tabindex="-1">网络相关 <a class="header-anchor" href="#网络相关" aria-label="Permalink to &quot;网络相关&quot;">​</a></h1><h2 id="hash和history的区别" tabindex="-1">hash和history的区别 <a class="header-anchor" href="#hash和history的区别" aria-label="Permalink to &quot;hash和history的区别&quot;">​</a></h2><ul><li>hash: 带<code>#</code>, 有一个<code>hashChange</code>事件, hash变化就会触发, 地址栏变化页面就会跳转。</li><li>history: 没有带<code>#</code>, 外观上比<code>hash</code>模式好看。利用<code>H5</code>的 <code>history</code> 中新增的俩个APi <code>pushState()</code> 和 <code>replaceState()</code>实现， 地址栏改变页面不会跳转。但是怕刷新，一刷新就会请求，会404。所以上线前需要后台支持，默认访问到 index.html</li></ul><div class="tip custom-block"><p class="custom-block-title">区别</p><p>hash就是url中#以及后面的字符, 改变hash值不会向后端发送请求，不会重新加载页面, hash不需要服务器配置</p><p>history 以 / 开头, 当history发生改变时会重新加载页面, 服务器配置一个回调路由。</p><p>history Interface 是浏览器历史记录栈提供的接口, 可以通过 back、 forward、 go 可以读取浏览器历史栈的信息</p><p>pushState, replaceState 还可以对浏览器历史记录进行修改</p><p>hash不足，不利于SEO 白屏时间长 页面定位会失效</p></div>',4),c=[h];function r(i,d,l,n,_,p){return a(),t("div",null,c)}const f=e(s,[["render",r]]);export{m as __pageData,f as default};
